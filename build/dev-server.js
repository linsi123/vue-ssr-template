const path = require('path')
const fs = require('fs')
const webpack = require('webpack')
const MFS = require('memory-fs')
const webpackClientConfig = require('./webpack.client.config')
const webpackServerConfig = require('./webpack.server.config')


module.exports = function startDevServer (app, cb) {
    let bundle
    let template

    // modify client config to work with hot middleware
    webpackClientConfig.entry = ['webpack-hot-middleware/client', webpackClientConfig.entry]
    webpackClientConfig.output.filename = '[name].js'
    webpackClientConfig.plugins.push(
      new webpack.HotModuleReplacementPlugin(),
      new webpack.NoEmitOnErrorsPlugin()
    )

    // dev middleware
    const webpackClientCompiler = webpack(webpackClientConfig)


    const devMiddleware = require('webpack-dev-middleware')(webpackClientCompiler, {
      publicPath: webpackClientConfig.output.publicPath,
      stats: {
        colors: true,
        chunks: false
      },
      serverSideRender: true 
    })

    const hotMiddleware = require('webpack-hot-middleware')(webpackClientCompiler,{
      log: false,
      heartbeat: 2000
    })

    app.use(devMiddleware)

    webpackClientCompiler.plugin('done', () => {
      // const fs = devMiddleware.fileSystem
      const filePath = path.join(process.cwd(), 'index.template.html')


      if (fs.existsSync(filePath)) {
        template = fs.readFileSync(filePath, 'utf-8')
        if (bundle) {
          cb(bundle, template)
        }
      }
    })



    // webpack-hot-middleware
    app.use(hotMiddleware)

    // watch and update server renderer
    const serverCompiler = webpack(webpackServerConfig)
    const mfs = new MFS()
    serverCompiler.outputFileSystem = mfs
    serverCompiler.watch({}, (err, stats) => {
      if (err) throw err
      stats = stats.toJson()
      stats.errors.forEach(err => console.error(err))
      stats.warnings.forEach(err => console.warn(err))

      // read bundle generated by vue-ssr-webpack-plugin
      const bundlePath = path.join(webpackServerConfig.output.path,'vue-ssr-server-bundle.json')
      bundle = JSON.parse(mfs.readFileSync(bundlePath, 'utf-8'))

      if (template) {
        cb(bundle, template)
      }
    })
}
